{"ast":null,"code":"var _jsxFileName = \"/Users/krishnayadav/Documents/adsmn/face-segmentation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport segmented_image_face from './segmented_image_face.jpg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [imageUrl, setImageUrl] = useState('');\n  const [segmentedImageUrl, setSegmentedImageUrl] = useState('');\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      alert('Please select a file');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      // Upload image to backend and store locally\n      const uploadResponse = await axios.post('http://127.0.0.1:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Get the stored image URL\n      const storedImageUrl = uploadResponse.data.storedImageUrl;\n\n      // Set the stored image URL\n      setImageUrl(storedImageUrl);\n      setSegmentedImageUrl('');\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleSegmentation = async () => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/segment', {\n        imageUrl\n      });\n      setSegmentedImageUrl(response.data.segmentedImageUr);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  console.log(\"setSegmentedImageUrl\", segmentedImageUrl);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Face Segmentation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSegmentation,\n        children: \"Segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), true && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"segmented-image\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Segmented Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: segmented_image_face,\n        alt: \"Segmented Face\",\n        width: \"500px\",\n        height: \"500px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"stjpT8rhNdIclxuSPf0ka6Cb2eo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","segmented_image_face","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","imageUrl","setImageUrl","segmentedImageUrl","setSegmentedImageUrl","handleFileChange","event","target","files","handleUpload","alert","formData","FormData","append","uploadResponse","post","headers","storedImageUrl","data","error","console","handleSegmentation","response","segmentedImageUr","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","onClick","src","alt","width","height","_c","$RefreshReg$"],"sources":["/Users/krishnayadav/Documents/adsmn/face-segmentation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport segmented_image_face from './segmented_image_face.jpg';\nimport './App.css';\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [imageUrl, setImageUrl] = useState('');\n  const [segmentedImageUrl, setSegmentedImageUrl] = useState('');\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      alert('Please select a file');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n\n\n    try {\n      // Upload image to backend and store locally\n      const uploadResponse = await axios.post('http://127.0.0.1:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Get the stored image URL\n      const storedImageUrl = uploadResponse.data.storedImageUrl;\n\n      // Set the stored image URL\n      setImageUrl(storedImageUrl);\n      setSegmentedImageUrl('');\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleSegmentation = async () => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/segment', { imageUrl });\n\n      setSegmentedImageUrl(response.data.segmentedImageUr);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  console.log(\"setSegmentedImageUrl\", segmentedImageUrl)\n\n  return (\n    <div className=\"container\">\n      <h1>Face Segmentation</h1>\n      <div className=\"form-container\">\n        <input type=\"file\" onChange={handleFileChange} accept=\"image/*\" />\n        <button onClick={handleUpload}>Upload</button>\n      </div>\n      {imageUrl && (\n        <div className=\"form-container\">\n          <button onClick={handleSegmentation}>Segment</button>\n        </div>\n      )}\n      {true && (\n        <div className=\"segmented-image\">\n          <h2>Segmented Image</h2>\n          <img src={segmented_image_face} alt=\"Segmented Face\" width=\"500px\" height={\"500px\"}/>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,oBAAoB,MAAM,4BAA4B;AAC7D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE9D,MAAMa,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,eAAe,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACV,YAAY,EAAE;MACjBW,KAAK,CAAC,sBAAsB,CAAC;MAC7B;IACF;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEd,YAAY,CAAC;IAGrC,IAAI;MACF;MACA,MAAMe,cAAc,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,EAAE;QAChFK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;;MAEF;MACA,MAAMC,cAAc,GAAGH,cAAc,CAACI,IAAI,CAACD,cAAc;;MAEzD;MACAf,WAAW,CAACe,cAAc,CAAC;MAC3Bb,oBAAoB,CAAC,EAAE,CAAC;IAC1B,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAACsB,IAAI,CAAC,+BAA+B,EAAE;QAAEd;MAAS,CAAC,CAAC;MAEhFG,oBAAoB,CAACkB,QAAQ,CAACJ,IAAI,CAACK,gBAAgB,CAAC;IACtD,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EACDC,OAAO,CAACI,GAAG,CAAC,sBAAsB,EAAErB,iBAAiB,CAAC;EAEtD,oBACEP,OAAA;IAAK6B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB9B,OAAA;MAAA8B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BlC,OAAA;MAAK6B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B9B,OAAA;QAAOmC,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAE3B,gBAAiB;QAAC4B,MAAM,EAAC;MAAS;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClElC,OAAA;QAAQsC,OAAO,EAAEzB,YAAa;QAAAiB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,EACL7B,QAAQ,iBACPL,OAAA;MAAK6B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7B9B,OAAA;QAAQsC,OAAO,EAAEb,kBAAmB;QAAAK,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CACN,EACA,IAAI,iBACHlC,OAAA;MAAK6B,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B9B,OAAA;QAAA8B,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBlC,OAAA;QAAKuC,GAAG,EAAEzC,oBAAqB;QAAC0C,GAAG,EAAC,gBAAgB;QAACC,KAAK,EAAC,OAAO;QAACC,MAAM,EAAE;MAAQ;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChC,EAAA,CArEQD,GAAG;AAAA0C,EAAA,GAAH1C,GAAG;AAuEZ,eAAeA,GAAG;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}